generator client {
    provider = "prisma-client-js"
    // output   = "../lib/generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum CustomerType {
    personal
    corporate
    government
}

enum IdentificationType {
    passport
    nationalID
    driverLicense
    CRN
}

enum UserRole {
    ADMIN
    USER
}

enum Language {
    EN
    AR
}

enum InvoiceStatus {
    DRAFT
    ISSUED
    CANCELED
}

enum PaymentType {
    CASH
    CARD
    BANK_TRANSFER
    OTHER
}

enum UserStatus {
    ACTIVE
    DEACTIVE
    PENDING
}

model User {
    id              String     @id @default(cuid())
    firstName       String
    lastName        String
    email           String     @unique
    image           String?
    mobileNumber    String
    defaultLanguage Language   @default(EN)
    status          UserStatus @default(PENDING)

    // Authentication
    passwordHash        String // store hashed password here
    tempPassword        String // store temp password (hashed as well, never plain)
    forcePasswordChange Boolean @default(true) // user must change temp password before isActive = true

    // Relations
    // invoices Invoice[]
    groups Group[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Group {
    id          String  @id @default(cuid())
    name        String  @unique
    description String?

    userId String
    User   User[]

    //TODO add roles

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// model Invoice {
//     id            String @id @default(cuid())
//     invoiceNumber String @unique

//     paymentType   PaymentType
//     invoiceStatus InvoiceStatus

//     subTotal Decimal @default(0) @db.Decimal(10, 3)
//     tax      Decimal @default(0) @db.Decimal(10, 3)
//     total    Decimal @default(0) @db.Decimal(10, 3)

//     dueDate     DateTime @default(dbgenerated("CURRENT_DATE + INTERVAL '7 days'"))
//     description String?

//     // user relation
//     createdById String?
//     createdBy   User?   @relation(fields: [createdById], references: [id])

//     // customer relation
//     customerId String?
//     customer   Customer? @relation(fields: [customerId], references: [id])

//     products ProductOnInvoice[]

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

// model Product {
//     id          String  @id @default(cuid())
//     englishName String
//     arabicName  String
//     description String?
//     unitPrice   Decimal @db.Decimal(10, 3)
//     tax         Decimal @db.Decimal(10, 3)

//     invoices ProductOnInvoice[]

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

// model Customer {
//     id          String @id @default(cuid())
//     englishName String
//     email       String @unique

//     createdAt DateTime  @default(now())
//     updatedAt DateTime  @updatedAt
//     Invoice   Invoice[]
// }

// model ProductOnInvoice {
//     id String @id @default(cuid())

//     quantity     Int     @default(1)
//     productPrice Decimal @default(0) @db.Decimal(10, 3) // price without tax
//     productTax   Decimal @default(0) @db.Decimal(10, 2) // tax on product
//     totalPrice   Decimal @default(0) @db.Decimal(10, 3) // total Price with tax

//     Invoice   Invoice? @relation(fields: [invoiceId], references: [id])
//     invoiceId String?

//     product   Product? @relation(fields: [productId], references: [id])
//     productId String?

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

// model Role {
//     id          String  @id @default(cuid())
//     name        String  @unique
//     description String?

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

// model Payment {
//     id              String        @id @default(cuid())
//     method          PaymentMethod
//     details         String?
//     amount          Decimal
//     date            DateTime
//     referenceNumber String?

//     invoiceId String
//     invoice   Invoice @relation(fields: [invoiceId], references: [id])

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }
